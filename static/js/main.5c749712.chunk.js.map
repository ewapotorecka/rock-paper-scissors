{"version":3,"sources":["paper.svg","rock.svg","scissors.svg","play-again-button.js","result-screen.js","game-screen.js","score-container.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","PlayAgainButton","className","onClick","props","React","Component","figuresCode","results","ResultScreen","computersChoice","handleClick","bind","this","showChoice","playersChoice","showResult","choice","src","paper","height","width","alt","rock","scissors","result","updateScore","dispatch","type","connect","state","showResultScreen","GameScreen","Math","floor","random","setState","calculateComputersChoice","showGameScreen","id","ScoreContainer","score","Player","Computer","initialState","store","createStore","action","App","showPlayAgainButton","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5c749712.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/paper.401eaf43.svg\";","module.exports = __webpack_public_path__ + \"static/media/rock.eb1bf189.svg\";","module.exports = __webpack_public_path__ + \"static/media/scissors.cb7ff8ea.svg\";","import React from 'react';\n\nexport class PlayAgainButton extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<button className=\"play-again\" onClick={ () => this.props.onClick() }>Play again</button>\n\t\t);\n\t}\n}\n","import React from 'react';\nimport { PlayAgainButton } from './play-again-button';\nimport { connect } from 'react-redux';\nimport paper from './paper.svg';\nimport rock from './rock.svg';\nimport scissors from './scissors.svg';\n/* \n\tResult: \n\t-1 -> Player lost\n\t0 -> Tie\n\t1 -> Player won\n*/\nconst figuresCode = {\n\t'rock': 0,\n\t'paper': 1,\n\t'scissors': 2\n};\n\nconst results = [ [ 0, -1, 1 ], [ 1, 0, -1 ], [ -1, 1, 0 ] ];\n\nfunction mapStateToProps( state ) {\n\treturn {\n\t\tshowResultScreen: state.showResultScreen\n\t};\n}\n\nclass ResultScreen extends React.Component {\n\tconstructor( props ) {\n\t\tsuper( props );\n\t\tthis.computersChoice = '';\n\t\tthis.handleClick = this.handleClick.bind( this );\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<div className=\"players-choice\">\n\t\t\t\t\t<h3>Player: </h3>\n\t\t\t\t\t{ this.showChoice( this.props.playersChoice ) }\n\t\t\t\t</div>\n\t\t\t\t<div className=\"computers-choice\">\n\t\t\t\t\t<h3>Computer: </h3>\n\t\t\t\t\t{ this.showChoice( this.props.computersChoice ) }\n\t\t\t\t</div>\n\t\t\t\t<div className=\"result\">\n\t\t\t\t\t<h2>{ this.showResult( this.props.playersChoice, this.props.computersChoice ) }</h2>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<PlayAgainButton\n\t\t\t\t\t\tonClick={this.handleClick}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</>\n\t\t);\n\t}\n\n\tshowChoice( choice ) {\n\t\tif ( choice === 'paper' ) {\n\t\t\treturn <img src={paper} height=\"35\" width=\"35\" alt=\"paper\" />;\n\t\t} else if ( choice === 'rock' ) {\n\t\t\treturn <img src={rock} height=\"35\" width=\"35\" alt=\"rock\" />;\n\t\t} else if ( choice === 'scissors' ) {\n\t\t\treturn <img src={scissors} height=\"35\" width=\"35\" alt=\"scissors\" />;\n\t\t}\n\t}\n\n\tshowResult( playersChoice, computersChoice ) {\n\t\tconst playersChoiceCode = figuresCode[ playersChoice ];\n\t\tconst computersChoiceCode = figuresCode[ computersChoice ];\n\t\tlet result = results[ playersChoiceCode ][ computersChoiceCode];\n\n\t\tif ( result === 0 ) {\n\t\t\tresult = 'Tie';\n\t\t\tthis.updateScore( result );\n\t\t} else if ( result === -1 ) {\n\t\t\tresult = 'You lose';\n\t\t\tthis.updateScore( result );\n\t\t} else if ( result === 1 ) {\n\t\t\tresult = 'You win';\n\t\t\tthis.updateScore( result );\n\t\t}\n\n\t\treturn result;\n\t}\n\n\thandleClick() {\n\t\tthis.props.dispatch( { type: 'SHOW_GAME_SCREEN' } );\n\t}\n\n\tupdateScore( result ) {\n\t\tif ( result === 'You win' ) {\n\t\t\tthis.props.dispatch( { type: 'UPDATE_SCORE_PLAYER_WIN' } );\n\t\t} else if ( result === 'You lose' ) {\n\t\t\tthis.props.dispatch( { type: 'UPDATE_SCORE_COMPUTER_WIN' } );\n\t\t} else if ( result === 'Tie' ) {\n\t\t\tthis.props.dispatch( { type: 'UPDATE_SCORE_TIE' } );\n\t\t}\n\t}\n}\n\nexport default connect( mapStateToProps )( ResultScreen );\n","\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport ResultScreen from './result-screen';\nimport paper from './paper.svg';\nimport rock from './rock.svg';\nimport scissors from './scissors.svg';\n\nfunction mapStateToProps( state ) {\n\treturn {\n\t\tshowGameScreen: state.showGameScreen\n\t};\n}\n\nclass GameScreen extends React.Component {\n\tcalculateComputersChoice() {\n\t\tconst results = [ 'paper', 'rock', 'scissors' ];\n\t\tconst computersChoice = results[ Math.floor( Math.random() * 3 ) ];\n\t\tthis.setState( { computersChoice } );\n\t}\n\n\thandleClick( playersChoice ) {\n\t\tthis.calculateComputersChoice();\n\t\tthis.setState( { playersChoice } );\n\t\tthis.props.dispatch( { type: 'SHOW_RESULT_SCREEN' } );\n\t}\n\n\trender() {\n\t\tif ( this.props.showGameScreen ) {\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t<div className=\"instruction\">\n\t\t\t\t\t\t<h1>Rock Paper Scissors</h1>\n\t\t\t\t\t</div>\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName=\"game-button\"\n\t\t\t\t\t\tid=\"rock\"\n\t\t\t\t\t\tonClick={ () => {\n\t\t\t\t\t\t\tthis.handleClick( 'rock' );\n\t\t\t\t\t\t} }>\n\t\t\t\t\t\t<img src={ rock } height=\"70\" width=\"70\" alt=\"rock\" />\n\t\t\t\t\t</button>\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName=\"game-button\"\n\t\t\t\t\t\tonClick={ () => {\n\t\t\t\t\t\t\tthis.handleClick( 'paper' );\n\t\t\t\t\t\t} }>\n\t\t\t\t\t\t<img src={ paper } height=\"70\" width=\"70\" alt=\"paper\" />\n\t\t\t\t\t</button>\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName=\"game-button\"\n\t\t\t\t\t\tonClick={ () => {\n\t\t\t\t\t\t\tthis.handleClick( 'scissors' );\n\t\t\t\t\t\t} }>\n\t\t\t\t\t\t<img src={ scissors } height=\"70\" width=\"70\" alt=\"scissors\" />\n\t\t\t\t\t</button>\n\t\t\t\t</>\n\t\t\t);\n\t\t} else {\n\t\t\treturn <ResultScreen playersChoice={ this.state.playersChoice } computersChoice={ this.state.computersChoice } />;\n\t\t}\n\t}\n}\n\nexport default connect( mapStateToProps )( GameScreen );\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nfunction mapStateToProps( state ) {\n\treturn {\n\t\tscore: state.score\n\t};\n}\n\nclass ScoreContainer extends React.Component {\n\tconstructor( props ) {\n\t\tsuper( props );\n\t\tthis.handleClick = this.handleClick.bind( this );\n\t}\n\t\n\trender() {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<div className=\"score\">\n\t\t\t\t<div><h3>SCORE</h3></div>\n\t\t\t\t<div>\n\t\t\t\t\tPlayer { this.props.score.Player } Computer{ ' ' }\n\t\t\t\t\t{ this.props.score.Computer }\n\t\t\t\t</div>\n\t\t\t\t\t<button onClick={ this.handleClick }>Reset score</button>\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t</>\n\t\t);\n\t}\n\n\thandleClick() {\n\t\tthis.props.dispatch( { type: 'RESET_SCORE' } );\n\t}\n}\n\nexport default connect( mapStateToProps )( ScoreContainer );\n","import React from 'react';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport './App.css';\nimport GameScreen from './game-screen';\nimport ScoreContainer from './score-container';\n\nconst initialState = {\n\tshowGameScreen: true,\n\tshowResultScreen: false,\n\tscore: {\n\t\tPlayer: 0,\n\t\tComputer: 0\n\t}\n};\n\nconst store = createStore( reducer );\n\nfunction reducer( state = initialState, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'UPDATE_SCORE_TIE':\n\t\t\treturn state;\n\t\tcase 'UPDATE_SCORE_PLAYER_WIN':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tscore: {\n\t\t\t\t\tPlayer: state.score.Player + 1,\n\t\t\t\t\tComputer: state.score.Computer\n\t\t\t\t}\n\t\t\t};\n\t\tcase 'UPDATE_SCORE_COMPUTER_WIN':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tscore: {\n\t\t\t\t\tPlayer: state.score.Player,\n\t\t\t\t\tComputer: state.score.Computer + 1\n\t\t\t\t}\n\t\t\t};\n\t\tcase 'RESET_SCORE':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tscore: {\n\t\t\t\t\tPlayer: 0,\n\t\t\t\t\tComputer: 0\n\t\t\t\t}\n\t\t\t}\n\t\tcase 'SHOW_RESULT_SCREEN':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tshowGameScreen: false,\n\t\t\t\tshowResultScreen: true\n\t\t\t};\n\t\tcase 'SHOW_GAME_SCREEN':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tshowGameScreen: true,\n\t\t\t\tshowResultScreen: false\n\t\t\t};\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nexport default class App extends React.Component {\n\tconstructor( props ) {\n\t\tsuper( props );\n\t\tthis.state = {\n\t\t\tshowGameScreen: true,\n\t\t\tshowPlayAgainButton: false,\n\t\t\tscore: {\n\t\t\t\tPlayer: 0,\n\t\t\t\tComputer: 0\n\t\t\t}\n\t\t};\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<Provider store={store}>\n\t\t\t\t\t<div className=\"buttons-container\">\n\t\t\t\t\t\t<GameScreen />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"score-container\">\n\t\t\t\t\t\t<ScoreContainer />\n\t\t\t\t\t</div>\n\t\t\t\t</Provider>\n\t\t\t</>\n\t\t);\n\t}\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\n/* globals process */\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t// [::1] is the IPv6 localhost address.\n\twindow.location.hostname === '[::1]' ||\n\t// 127.0.0.1/8 is considered localhost for IPv4.\n\twindow.location.hostname.match(\n\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n\t)\n);\n\nexport function register( config ) {\n\tif ( process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator ) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL( process.env.PUBLIC_URL, window.location.href );\n\t\tif ( publicUrl.origin !== window.location.origin ) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener( 'load', () => {\n\t\t\tconst swUrl = `${ process.env.PUBLIC_URL }/service-worker.js`;\n\n\t\t\tif ( isLocalhost ) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker( swUrl, config );\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then( () => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t'worker. To learn more, visit https://bit.ly/CRA-PWA'\n\t\t\t\t\t);\n\t\t\t\t} );\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW( swUrl, config );\n\t\t\t}\n\t\t} );\n\t}\n}\n\nfunction registerValidSW( swUrl, config ) {\n\tnavigator.serviceWorker\n\t\t.register( swUrl )\n\t\t.then( registration => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif ( installingWorker == null ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif ( installingWorker.state === 'installed' ) {\n\t\t\t\t\t\tif ( navigator.serviceWorker.controller ) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\n\t\t\t\t\t\t\t\t'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif ( config && config.onUpdate ) {\n\t\t\t\t\t\t\t\tconfig.onUpdate( registration );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log( 'Content is cached for offline use.' );\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif ( config && config.onSuccess ) {\n\t\t\t\t\t\t\t\tconfig.onSuccess( registration );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t} )\n\t\t.catch( error => {\n\t\t\tconsole.error( 'Error during service worker registration:', error );\n\t\t} );\n}\n\nfunction checkValidServiceWorker( swUrl, config ) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch( swUrl )\n\t\t.then( response => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get( 'content-type' );\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\t( contentType != null && contentType.indexOf( 'javascript' ) === -1 )\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then( registration => {\n\t\t\t\t\tregistration.unregister().then( () => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t} );\n\t\t\t\t} );\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW( swUrl, config );\n\t\t\t}\n\t\t} )\n\t\t.catch( () => {\n\t\t\tconsole.log(\n\t\t\t\t'No internet connection found. App is running in offline mode.'\n\t\t\t);\n\t\t} );\n}\n\nexport function unregister() {\n\tif ( 'serviceWorker' in navigator ) {\n\t\tnavigator.serviceWorker.ready.then( registration => {\n\t\t\tregistration.unregister();\n\t\t} );\n\t}\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( <App />, document.getElementById( 'root' ) );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}